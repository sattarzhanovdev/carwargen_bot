const { Telegraf } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf('7932658245:AAFq2efubIKMFkVWlJJ0Dytr_wsGqYBK7EA');

const userWatchlist = {}; // –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—à–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const priceHistory = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ü–µ–Ω

bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry. \n–î–æ–ø. –∫–æ–º–∞–Ω–¥—ã: /compare, /credit, /watchlist'));

bot.on('text', async (ctx) => {
    const query = ctx.message.text.toLowerCase();
    try {
        const response = await axios.get('https://carwagenapi.pythonanywhere.com/api/cars/');
        const cars = response.data;

        if (query.startsWith('/compare')) {
            return handleComparison(ctx, cars, query);
        }
        if (query.startsWith('/credit')) {
            return handleCredit(ctx, query);
        }
        if (query.startsWith('/watchlist')) {
            return handleWatchlist(ctx, query);
        }

        const foundCars = cars.filter(car => `${car.brand} ${car.model}`.toLowerCase().includes(query));

        if (foundCars.length > 0) {
            foundCars.forEach(car => {
                ctx.replyWithPhoto(car.photo, {
                    caption: `üöó ${car.brand} ${car.model}\nüìÖ –ì–æ–¥: ${car.year}\nüóíÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: ${car.complectation}\nüîÖ –¶–≤–µ—Ç: ${car.color}\nüí∞ –¶–µ–Ω–∞: ${car.price}$\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${getRandomRating()} / 5`
                });
            });
        } else {
            ctx.reply('‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        ctx.reply('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }
});

function handleComparison(ctx, cars, query) {
    const models = query.replace('/compare', '').trim().split(',');
    const foundCars = models.map(model => cars.find(car => `${car.brand} ${car.model}`.toLowerCase().includes(model.trim().toLowerCase()))).filter(Boolean);

    if (foundCars.length < 2) {
        return ctx.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –º–∞—à–∏–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.');
    }

    let comparisonText = 'üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:\n';
    foundCars.forEach(car => {
        comparisonText += `\nüöó ${car.brand} ${car.model}\n–ì–æ–¥: ${car.year}, –¶–µ–Ω–∞: ${car.price}$, –†–µ–π—Ç–∏–Ω–≥: ${getRandomRating()} / 5`;
    });
    ctx.reply(comparisonText);
}

function handleCredit(ctx, query) {
    const params = query.split(' ');
    if (params.length < 3) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /credit —Ü–µ–Ω–∞ —Å—Ä–æ–∫_–≤_–º–µ—Å—è—Ü–∞—Ö –ø—Ä–æ—Ü–µ–Ω—Ç');

    const [_, price, months, rate] = params.map(Number);
    const monthlyPayment = (price * (rate / 100) / 12) / (1 - Math.pow(1 + (rate / 100) / 12, -months));
    ctx.reply(`üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç: \n–¶–µ–Ω–∞: ${price}$ \n–°—Ä–æ–∫: ${months} –º–µ—Å—è—Ü–µ–≤ \n–°—Ç–∞–≤–∫–∞: ${rate}% \nüìå –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ${monthlyPayment.toFixed(2)}$`);
}

function handleWatchlist(ctx, query) {
    const userId = ctx.message.from.id;
    if (!userWatchlist[userId]) userWatchlist[userId] = [];

    const model = query.replace('/watchlist', '').trim();
    if (!model) return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π: /watchlist –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É.');

    userWatchlist[userId].push(model);
    ctx.reply(`‚úÖ ${model} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ! –ú—ã —Å–æ–æ–±—â–∏–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è.`);
}

function getRandomRating() {
    return (Math.random() * (5 - 3) + 3).toFixed(1); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç 3.0 –¥–æ 5.0
}

async function checkPriceChanges() {
    try {
        const response = await axios.get('https://carwagenapi.pythonanywhere.com/api/cars/');
        const cars = response.data;

        for (const userId in userWatchlist) {
            userWatchlist[userId].forEach(model => {
                const car = cars.find(c => `${c.brand} ${c.model}`.toLowerCase().includes(model.toLowerCase()));
                if (car) {
                    const prevPrice = priceHistory[car.model];
                    if (prevPrice && prevPrice !== car.price) {
                        bot.telegram.sendMessage(userId, `‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∞ ${car.brand} ${car.model} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –ë—ã–ª–æ: ${prevPrice}$, —Å—Ç–∞–ª–æ: ${car.price}$`);
                    }
                    priceHistory[car.model] = car.price;
                }
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:', error);
    }
}

setInterval(checkPriceChanges, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
