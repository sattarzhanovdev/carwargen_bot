const { Telegraf } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf('YOUR_BOT_TOKEN');

const userWatchlist = {}; // –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—à–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const priceHistory = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ü–µ–Ω

bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry. \n–î–æ–ø. –∫–æ–º–∞–Ω–¥—ã: /compare, /credit, /watchlist'));

bot.on('text', async (ctx) => {
    const query = ctx.message.text.toLowerCase();
    try {
        const response = await axios.get('https://carwagenapi.pythonanywhere.com/api/cars/');
        const cars = response.data;

        if (query.startsWith('/compare')) {
            return handleComparison(ctx, cars, query);
        }
        if (query.startsWith('/credit')) {
            return handleCredit(ctx, query);
        }
        if (query.startsWith('/watchlist')) {
            return handleWatchlist(ctx, query);
        }

        const foundCars = cars.filter(car => `${car.brand} ${car.model}`.toLowerCase().includes(query));

        if (foundCars.length > 0) {
            foundCars.forEach(car => sendCarInfo(ctx, car));
        } else {
            ctx.reply('‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        ctx.reply('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }
});

function sendCarInfo(ctx, car) {
    ctx.replyWithPhoto(car.photo, {
        caption: `üöó ${car.brand} ${car.model}\nüìÖ –ì–æ–¥: ${car.year}\nüóíÔ∏è –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: ${car.complectation}\nüîÖ –¶–≤–µ—Ç: ${car.color}\nüí∞ –¶–µ–Ω–∞: ${car.price}$\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${getRandomRating()} / 5`
    });
}

async function checkPriceChanges() {
    try {
        const response = await axios.get('https://carwagenapi.pythonanywhere.com/api/cars/');
        const cars = response.data;

        for (const userId in userWatchlist) {
            userWatchlist[userId].forEach(model => {
                const car = cars.find(c => `${c.brand} ${c.model}`.toLowerCase().includes(model.toLowerCase()));
                if (car) {
                    const prevPrice = priceHistory[car.model];
                    if (prevPrice && prevPrice !== car.price) {
                        bot.telegram.sendMessage(userId, `‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∞ ${car.brand} ${car.model} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –ë—ã–ª–æ: ${prevPrice}$, —Å—Ç–∞–ª–æ: ${car.price}$`);
                        sendCarInfo({ replyWithPhoto: (photo, options) => bot.telegram.sendPhoto(userId, photo, options) }, car);
                    }
                    priceHistory[car.model] = car.price;
                }
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω:', error);
    }
}

setInterval(checkPriceChanges, 5000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
